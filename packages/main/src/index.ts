// import "reflect-metadata"

import { MarkdownDocument } from './entity/MarkdownDocument'
import { app, BrowserWindow } from 'electron'
import { createConnection } from 'typeorm'
import { Project } from './entity/Project'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

if (!process.env.isPackaged) {
  app
    .whenReady()
    .then(() => import('electron-devtools-installer'))
    .then(
      ({ default: installExtension, REDUX_DEVTOOLS, REACT_DEVELOPER_TOOLS }) =>
        installExtension([REDUX_DEVTOOLS, REACT_DEVELOPER_TOOLS], {
          loadExtensionOptions: {
            allowFileAccess: true,
          },
        }),
    )
    .catch((e) => console.error('Failed install extension:', e))
}

const createWindow = async () => {
  // const conf = await import("../ormconfig.json")

  createConnection({
    type: 'sqlite',
    database: 'database.sqlite',
    synchronize: true,
    logging: false,
    entities: [Project, MarkdownDocument],
    // migrations: ["src/migration/**/*.ts"],
    // subscribers: ["src/subscriber/**/*.ts"],
    // cli: {
    //   entitiesDir: "src/entity",
    //   migrationsDir: "src/migration",
    //   subscribersDir: "src/subscriber",
    // },
  })
  // .then(async (connection) => {
  //   console.log("Inserting a new user into the database...")
  //   const myNewProject = new Project()
  //   myNewProject.name = "Imbnu"
  //   await connection.manager.save(myNewProject)

  //   const projects = await connection.manager.find(Project)
  //   console.log('loaded projects: ', projects)

  //   const newDoc = new MarkdownDocument()
  //   newDoc.body = '#my 5th doc here'
  //   newDoc.projects = [myNewProject]
  //   await connection.manager.save(newDoc)

  //   const documents = await connection.manager.find(MarkdownDocument, { relations: ['projects']})
  //   console.log('loaded documents: ', documents)
  //   // console.log('loaded documents: ', documents[2].projects)
  //   documents.forEach(doc => {
  //     console.log('doc: ', doc)
  //     console.log('doc.projects: ', doc.projects)
  //   });
  // })
  // .catch((error) => console.log(error))

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    titleBarStyle: 'hiddenInset',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  mainWindow.webContents.openDevTools()

  mainWindow?.on('ready-to-show', () => {
    mainWindow?.maximize()
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
